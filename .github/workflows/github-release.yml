name: GitHub  Release

on:
  push:
    branches:
      - main
    #tags:
    #- v[0-9]+.[0-9]+.[0-9]+*

env:
  CARGO_TERM_COLOR: always
  CONTAINER_REGISTRY: ghcr.io
  # # GH Repository must be lower case when using in GH action
  CONTAINER_REPOSITORY: ${{ github.repository }}
  ORIGINAL_SOURCECODE_URL: https://github.com/parseablehq/parseable

jobs:

  init-env:
    name: Set env outputs
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      actions: none
      checks: none
      contents: none
      deployments: none
      issues: none
      packages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
      # id-token: write # needed for signing the images with GitHub OIDC **not production ready**
    outputs:
      container_registry_base_uri: ${{ steps.set-env.outputs.container_registry_base_uri }}
    steps:
      - name: Set env for later jobs
        id: set-env
        run: |
          echo "container_registry_base_uri=$(echo $CONTAINER_REGISTRY/$(echo $CONTAINER_REPOSITORY | tr 'A-Z' 'a-z'))" >> $GITHUB_OUTPUT

  release:
    name: Publish to Github Relases
    needs: [init-env]
    outputs:
      rc: ${{ steps.check-tag.outputs.rc }}

    strategy:
      fail-fast: false
      matrix:
        include:
        - build: aarch64
          #os: ubuntu-20.04
          os: ubuntu-latest
          target: aarch64-unknown-linux-gnu
          linker: gcc-aarch64-linux-gnu
          use-cross: true
          asset_name: parseable-linux-aarch64
    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v2

    - name: Check Tag
      id: check-tag
      shell: bash
      run: |
        tag=${GITHUB_REF##*/}
        echo "::set-output name=version::$tag"
        if [[ "$tag" =~ [0-9]+.[0-9]+.[0-9]+$ ]]; then
          echo "::set-output name=rc::false"
        else
          echo "::set-output name=rc::true"
        fi
    - name: Install Rust Toolchain Components
      uses: actions-rs/toolchain@v1
      with:
        override: true
        target: ${{ matrix.target }}
        toolchain: stable
        profile: minimal # minimal component installation (ie, no documentation)
        
    - name: Install OpenSSL
      if: runner.os == 'Linux'
      run: sudo apt-get install -y libssl-dev 

    - name: APT update
      run: |
        sudo apt update

    - name: Install target specific tools
      if: matrix.use-cross
      run: |
        sudo apt-get install -y ${{ matrix.linker }}

    - name: Configure target aarch64 GNU
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      ## Environment variable is not passed using env:
      ## LD gold won't work with MUSL
      # env:
      #   JEMALLOC_SYS_WITH_LG_PAGE: 16
      #   RUSTFLAGS: '-Clink-arg=-fuse-ld=gold'
      ## LD gold had problem with meili v0.30 aarch glibc build
      run: |
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config
        echo 'JEMALLOC_SYS_WITH_LG_PAGE=16' >> $GITHUB_ENV
        ## echo RUSTFLAGS="-Clink-arg=-fuse-ld=gold" >> $GITHUB_ENV
  
    - name: Show Version Information (Rust, cargo, GCC)
      shell: bash
      run: |
        gcc --version || true
        rustup -V
        rustup toolchain list
        rustup default
        cargo -V
        rustc -V
      
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.use-cross }}
        command: build
        args: --locked --release --target=${{ matrix.target }} ${{ matrix.cargo-flags }}

    - name: Upload the binary to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.PUBLISH_TOKEN }}
        # repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: target/${{ matrix.target }}/release/parseable
        asset_name: ${{ matrix.asset_name }}
        # tag: ${{ env.REMOTE_BRANCH_NAME }}
        overwrite: true

    - name: Build Archive
      shell: bash
      id: package
      env:
        target: ${{ matrix.target }}
        version:  ${{ steps.check-tag.outputs.version }}
      run: |
        set -euxo pipefail
        bin=${GITHUB_REPOSITORY##*/}
        src=`pwd`
        dist=$src/dist
        name=$bin-$version-$target
        executable=target/$target/release/$bin
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          executable=$executable.exe
        fi
        mkdir $dist
        cp $executable $dist
        cd $dist
        if [[ "$RUNNER_OS" == "Windows" ]]; then
            archive=$dist/$name.zip
            7z a $archive *
            echo "::set-output name=archive::`pwd -W`/$name.zip"
        else
            archive=$dist/$name.tar.gz
            tar czf $archive *
            echo "::set-output name=archive::$archive"
        fi
    - name: Publish Archive
      uses: softprops/action-gh-release@v0.1.15
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      with:
        draft: false
        files: ${{ steps.package.outputs.archive }}
        prerelease: ${{ steps.check-tag.outputs.rc == 'true' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
